# Copyright 2024 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""JAX-based dataset generator for binary classification problems."""

import numpy as np
from vizier.service import clients
from vizier.service import pyvizier as vz

from dp_auditorium import interfaces
from dp_auditorium.configs import dataset_generator_config
from dp_auditorium.generators import vizier_dataset_generator


def _initialize_vizier_problem_and_params_lookup_table(
    num_float_params: int, num_int_params: int, features_min_value: float,
    features_max_value: float, num_classes: int
) -> tuple[vz.ProblemStatement, dict[str, int]]:
  """Returns Vizier problem and parameters lookup table.

  This function initializes a Vizier problem and adds named parameters to it.
  `VizierDatasetGenerator` retrieves Vizier parameters (names and values) and
  organizes them into a one-dimensional array called `vizier_params`, which will
  serve as the input for the function
  `get_neighboring_datasets_from_vizier_params`. This function creates mappings
  between parameter names and their corresponding indices in `vizier_params`
  to ensure consistency between `_extract_params_from_trial` and
  `get_neighboring_datasets_from_vizier_params`,  and that features and labels
  are correctly utilized by classification mechanisms.

  Args:
    num_float_params: Number of Vizier parameters of type float. These will be
      used as features.
    num_int_params: Number of Vizier parameters of type int. These will be
      used as labels.
    features_min_value: Minimum value for feature parameters.
    features_max_value: Maximum value for feature parameters.
    num_classes: Number of class labels.

  Returns:
    A tuple where the first element is a Vizier problem and the second element a
    dictionary where keys are the problem's parameters names and values are the
    corresponding index in a flattened array `vizier_params`.
  """
  idx_to_str = {idx: f'float{idx}' for idx in range(num_float_params)}
  str_to_idx = {
      name: int(name.split('float', 2)[1]) for name in idx_to_str.values()
  }
  idx_to_str_int = {
      idx: f'int{idx}'
      for idx in range(num_float_params, num_float_params + num_int_params)
  }
  str_to_idx_int = {
      name: int(name.split('int', 2)[1]) for name in idx_to_str_int.values()
  }
  idx_to_str.update(idx_to_str_int)
  str_to_idx.update(str_to_idx_int)

  # Define problem parameters
  problem = vz.ProblemStatement()

  for i in range(num_float_params):
    problem.search_space.root.add_float_param(
        idx_to_str[i],
        min_value=features_min_value,
        max_value=features_max_value,
    )
  for i in range(num_float_params, num_float_params+num_int_params):
    problem.search_space.root.add_int_param(
        idx_to_str[i],
        min_value=0,
        max_value=num_classes,
    )
  return problem, str_to_idx


class ClassificationDatasetGenerator(
    vizier_dataset_generator.VizierDatasetGenerator
):
  """Classification dataset generators supported by Vizier.

  This class generate pairs of add/remove-neighboring datasets, where each
  record has the form `(features, label)`. `features` is a float array and label
  an integer indicating a class. Both features and labels are generated by
  Vizier using the search algorithm specified in the configuration.
  """

  def __init__(
      self,
      config: dataset_generator_config.ClassificationDatasetGeneratorConfig,
  ):
    """Initializes a dataset generator where records have features and labels.

    Args:
      config: A configuration proto for classification dataset generator.
    """

    self._num_samples = config.num_samples
    self._sample_dim = config.sample_dim
    self._num_float_params = config.sample_dim * config.num_samples
    self._num_int_params = config.num_samples
    self._num_vizier_params = self._num_float_params + self._num_int_params

    # Get indices to parameter names mapping assigned in Vizier and its inverse.
    problem, str_to_idx = _initialize_vizier_problem_and_params_lookup_table(
        num_float_params=self._num_float_params,
        num_int_params=self._num_int_params,
        features_min_value=config.min_value,
        features_max_value=config.max_value,
        num_classes=config.num_classes,
    )

    self._str_to_idx = str_to_idx

    # Define metric.
    self._metric_name = config.metric_name
    problem.metric_information = [
        vz.MetricInformation(
            name=config.metric_name, goal=vz.ObjectiveMetricGoal.MAXIMIZE
        )
    ]

    study_config = vz.StudyConfig.from_problem(problem)
    study_config.algorithm = config.search_algorithm

    self._study_client = clients.Study.from_study_config(
        study_config, owner=config.study_owner, study_id=config.study_name
    )

    self._trial_loaded = False
    self._last_trial = None

  def get_neighboring_datasets_from_vizier_params(
      self, vizier_params: np.ndarray
  ) -> interfaces.NeighboringDatasetsType:
    """Transforms a one-dimensional numpy array to neighboring datasets.

    Generates neighboring datasets where `data = (features, labels)`. `features`
    is an array with shape (self._num_samples, self._sample_dim) and labels an
    array with shape (self._num_samples,).

    Args:
      vizier_params: array with parameters generated by Vizier.

    Returns:
      Pair `(data1, data2)` of neighboring datasets under the add/remove
      definition. `data2` will have one record less than `data1`.
    """

    features = vizier_params[: self._num_float_params]
    features = features.reshape(self._num_samples, self._sample_dim)
    labels = vizier_params[self._num_float_params :]

    data1 = features, labels
    data2 = data1[0][:-1], data1[1][:-1]
    return data1, data2
