# Copyright 2024 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Pipeline DP dataset generator."""

import dataclasses
from typing import Any

import numpy as np

from dp_auditorium import interfaces
from dp_auditorium.configs import dataset_generator_config
from dp_auditorium.generators import vizier_dataset_generator


@dataclasses.dataclass
class PipelineDpDatasetGeneratorConfig:
  max_num_privacy_ids: int
  max_num_partitions: int


class PipelineDpDatasetGenerator(
    vizier_dataset_generator.VizierDatasetGenerator
):
  """Generates adjacent datasets from Vizier parameters."""

  def __init__(
      self,
      config: dataset_generator_config.VizierDatasetGeneratorConfig,
      pipeline_dp_generator_config: PipelineDpDatasetGeneratorConfig,
  ) -> Any:
    # Overwrites number of Vizier parameters to ensure all pairs of partition-id
    # and privacy-id are populated.
    config.num_vizier_parameters = (
        pipeline_dp_generator_config.max_num_privacy_ids
        * pipeline_dp_generator_config.max_num_partitions
    )
    super().__init__(config)
    self._max_num_privacy_ids = pipeline_dp_generator_config.max_num_privacy_ids
    self._max_num_partitions = pipeline_dp_generator_config.max_num_partitions

  def _generate_sparse_matrix_from_dense(
      self, data: np.ndarray
  ) -> list[tuple[int, int, float]]:
    """Generates pd.Dataframe sparse representation of dense array `data`."""
    return [(x[0][0], x[0][1], x[1]) for x in np.ndenumerate(data)]

  def get_neighboring_datasets_from_vizier_params(
      self, vizier_params: np.ndarray
  ) -> interfaces.NeighboringDatasetsType:
    """Transforms a one-dimensional numpy array to neighboring datasets.

    Pipeline-DP mechanisms receive input data in the form of a list of records
    `[x1, x2,...]` where each record `xi` is a tuple
    `xi=(partition_id, privacy_id, value)`. `vizier_params` contains values for
    all pairs (partition_id, privacy_id). This functions receives those values,
    reshapes them into to a dense matrix `all_data` where each row corresponds
    to a privacy-id and each column to a partition-id. Finally, it generates
    neighboring datasets `(data1, data2)` under the add/remove definition by
    converting to sparse representation the first `max_num_privacy_ids-1` rows
    of `all_data` as data1 and `all_data` as `data2`.

    Args:
      vizier_params: array with parameters generated by Vizier.

    Returns:
      Pair of neighboring datasets under the add/remove definition.
    """
    all_data = vizier_params.reshape(
        self._max_num_privacy_ids, self._max_num_partitions
    )
    data1 = self._generate_sparse_matrix_from_dense(all_data[:-1, :])
    data2 = self._generate_sparse_matrix_from_dense(all_data)
    return data1, data2
