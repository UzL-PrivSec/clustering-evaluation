# Copyright 2024 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Privacy test runner class.

This module implements a tester runner for testing differential privacy
guarantees of given input mechanisms.
"""

import numpy as np
import scipy as sp

from dp_auditorium import interfaces
from dp_auditorium.configs import privacy_test_runner_config


def _get_postprocess_function(
    config: privacy_test_runner_config.PrivacyTestRunnerConfig,
):
  """Retrieves a post-processing function from the tester config."""
  if config.post_processing == privacy_test_runner_config.PostProcessing.NONE:
    return lambda samples: samples
  elif config.post_processing == privacy_test_runner_config.PostProcessing.TANH:
    return np.tanh
  elif (
      config.post_processing
      == privacy_test_runner_config.PostProcessing.CHEBYSHEV_POLYNOMIALS_D5
  ):

    def chebshev_projection_d5(x):
      """Converts inputs to scaled Chebyshev evaluations."""
      max_degree = 5
      sample_size = x.shape[0]
      result = np.zeros(shape=[sample_size, max_degree + 1])
      rescaled = np.tanh(x)
      for i in range(max_degree + 1):
        result[:, i] = np.squeeze(sp.special.eval_chebyt(i, rescaled))
      return result

    return chebshev_projection_d5
  else:
    raise ValueError("Unknown post-processing function.")


class PrivacyTestRunner:
  """Privacy test runner class for testing a mechanism's privacy guarantee.

  PrivacyTestRunner tests the privacy guarantee of a mechanism on several pairs
  of neighboring datasets. For each pair of datasetes it instantiates a
  `PropertyTester` that estimates a lower bound on a given privacy parameter.

  Attributes:
    dataset_generator: A callable that generates neighboring pairs of datasets
      for testing at each trial.
    property_tester: A PropertyTester object. It has two methods, one that
      estimates a lower bound on a privacy parameter, and a second one that
      given an estimate outputs a boolean indicating if the estimated divergence
      is evidence enough to reject tha hypothesis that the privacy property
      holds for the mechanism.
    config: Tester configuration.
    maybe_postprocess: Callable applied to samples from a mechanism before
      passing them to the property_tester.
  """

  def __init__(
      self,
      config: privacy_test_runner_config.PrivacyTestRunnerConfig,
      dataset_generator: interfaces.DatasetGenerator,
      property_tester: interfaces.PropertyTester,
  ):
    self._config = config
    self._dataset_generator = dataset_generator
    self._property_tester = property_tester
    self.maybe_postprocess = _get_postprocess_function(config)

  def test_privacy(
      self, mechanism: interfaces.Mechanism, mechanism_name: str
  ) -> privacy_test_runner_config.PrivacyTestRunnerResults:
    """Test privacy guarantee of a mechanism over several datasets.

    Main loop to test the privacy guarantee of a mechanism using a
    `PropertyTester` over a number of trials (indicated in the initial tester
    configuration). At each trial, a pair of datasets is generated, and the
    PropertyTester estimates a lower bound on the divergence between the
    distributions generated by outputs of the mechanism on the two datasets.

    Args:
      mechanism: Implementation of a mechanism being tested.
      mechanism_name: Name of the mechanism to be recorded in the results.

    Returns:
      A dataclass populated with results from the test.
    """
    # Populate results preamble.
    privacy_test_result = privacy_test_runner_config.PrivacyTestRunnerResults(
        mechanism_name=mechanism_name,
        property_tester=self._config.property_tester,
        privacy_property=self._property_tester.privacy_property,
        max_num_trials=self._config.max_num_trials,
        lower_bound_divergence_estimates=[],
    )
    last_divergence_estimate = None
    for trial in range(self._config.max_num_trials):

      # Generate a pair of datasets.
      dataset1, dataset2 = self._dataset_generator(last_divergence_estimate)

      # Generate samples from datasets.
      samples1 = mechanism(dataset1, self._config.num_samples)
      samples2 = mechanism(dataset2, self._config.num_samples)

      # Postprocess the samples.
      postprocessed_samples1 = self.maybe_postprocess(samples1)
      postprocessed_samples2 = self.maybe_postprocess(samples2)

      # Compute divergence estimate in both directions (for non symmetric
      # properties) and take the maximum.
      divergence_estimate_12 = self._property_tester.estimate_lower_bound(
          postprocessed_samples1,
          postprocessed_samples2,
          self._config.failure_probability,
      )
      divergence_estimate_21 = self._property_tester.estimate_lower_bound(
          postprocessed_samples2,
          postprocessed_samples1,
          self._config.failure_probability,
      )
      last_divergence_estimate = max(
          divergence_estimate_12, divergence_estimate_21
      )
      privacy_test_result.lower_bound_divergence_estimates.append(
          last_divergence_estimate
      )

      # Stop if a privacy violation is found.
      if self._property_tester.reject_property(last_divergence_estimate):
        privacy_test_result.termination_reason = (
            privacy_test_runner_config.TerminationReason.FOUND_PRIVACY_VIOLATION
        )
        privacy_test_result.found_privacy_violation = (
            privacy_test_runner_config.FoundPrivacyViolation(
                self._config.failure_probability
            )
        )
        privacy_test_result.num_inspected_trials = trial + 1
        return privacy_test_result

    # No privacy violation found.
    privacy_test_result.termination_reason = (
        privacy_test_runner_config.TerminationReason.TRIAL_LIMIT_REACHED
    )
    privacy_test_result.num_inspected_trials = self._config.max_num_trials
    return privacy_test_result
